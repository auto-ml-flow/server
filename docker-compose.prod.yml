services:
  nginx:
    image: nginx:1.19.3
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.nginx/nconf/nginx.conf:/etc/nginx/nginx.conf
      - ./.nginx:/etc/nginx/conf.d/
      - media:/media
      - static:/static
    depends_on:
      - auto_ml_flow
  
  auto_ml_flow:
    image: mawlle/auto_ml_flow:latest
    restart: always
    env_file:
      - .env
    volumes:
      - media:/app/media
      - static:/app/static
    ports:
      - ${APP_PORT}:${APP_PORT}
    depends_on:
      - postgres
    command: >
      sh -c "python ./manage.py migrate &&
      python ./manage.py collectstatic &&
      gunicorn auto_ml_flow.wsgi:application --workers 4 --threads 4 --limit-request-line 10000 -t=600 --log-level debug --bind 0.0.0.0:${APP_PORT}"

  celery:
    container_name: celery
    image: mawlle/auto_ml_flow:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - auto_ml_flow
    command: sh -c "sleep 20 && celery -A auto_ml_flow worker -l DEBUG"
  
  scheduler:
    container_name: scheduler
    image: mawlle/auto_ml_flow:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - auto_ml_flow
    command: sh -c "sleep 20 && celery -A auto_ml_flow beat -l DEBUG"

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 auto_ml_flow celery scheduler

  postgres:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_INITDB_ARGS=--auth=md5
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT}
  
  pgbouncer:
    image: edoburu/pgbouncer:latest
    env_file:
      - .env
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=${POSTGRES_PORT}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - ADMIN_USERS=${POSTGRES_USER}
      - MAX_CLIENT_CONN=1000
    expose:
      - ${POSTGRES_PORT}
  
  redis:
    image: redis:alpine
    expose:
      - 6379

volumes:
  postgres_storage: {}
  media: {}
  static: {}
