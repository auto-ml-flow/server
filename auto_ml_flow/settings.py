"""
Django settings for auto_ml_flow project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import environ
from django.utils.translation import gettext_lazy as _

env = environ.Env()

BASE_DIR = Path(__file__).resolve().parent.parent

env.read_env(BASE_DIR / ".env")

SECRET_KEY = (
    "SECRET_KEY",
    "django-insecure-o+lp4whc7t837=wgrcimc^k2zz)-_p6&ta6egg4ui=xf*7qx*6",
)
DEBUG = env.bool("DEBUG", True)
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["127.0.0.1", "localhost"])
CORS_ALLOW_ALL_ORIGINS = True
CSRF_TRUSTED_ORIGINS = ["https://87.242.117.47"]

# Apps
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "django_filters",
    "rosetta",
    "drf_spectacular",
    "django_celery_beat",
    "corsheaders",
]
LOCAL_APPS = ["experiment", "system", "dataset", "meta_algo"]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "auto_ml_flow.urls"
WSGI_APPLICATION = "auto_ml_flow.wsgi.application"

# Templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Database settings
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": env.str("POSTGRES_HOST", "127.0.0.1"),
        "PORT": env.str("POSTGRES_PORT", "5432"),
        "NAME": env.str("POSTGRES_NAME", "auto_ml_flow"),
        "USER": env.str("POSTGRES_USER", "postgres"),
        "PASSWORD": env.str("POSTGRES_PASSWORD", "postgres"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
    }
}
REDIS_HOST = env.str("DJANGO_REDIS_HOST", "localhost")
REDIS_PORT = env.int("DJANGO_REDIS_PORT", 6379)

REDIS_CACHE_HOST = env.str("DJANGO_REDIS_HOST", REDIS_HOST)
REDIS_CACHE_PORT = env.int("REDIS_CACHE_PORT", REDIS_PORT)
REDIS_CACHE_DB = env.int("DJANGO_REDIS_CACHE_DB", 1)

REDIS_CELERY_HOST = env.str("DJANGO_REDIS_CELERY_HOST", REDIS_HOST)
REDIS_CELERY_PORT = env.int("DJANGO_REDIS_CELERY_PORT", REDIS_PORT)
REDIS_CELERY_DB = env.int("DJANGO_REDIS_CELERY_DB", 2)
REDIS_CELERY_RESULT_DB = env.int("DJANGO_REDIS_CELERY_RESULT_DB", 3)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": [
            f"redis://{REDIS_CACHE_HOST}:{REDIS_CACHE_PORT}",
        ],
        "OPTIONS": {
            "DB": REDIS_CACHE_DB,
            "CONNECTION_POOL_CLASS": "redis.BlockingConnectionPool",
            "CONNECTION_POOL_CLASS_KWARGS": {
                "max_connections": 50,
                "timeout": 20,
            },
            "MAX_CONNECTIONS": 1000,
            "PICKLE_VERSION": -1,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = env.str("LANGUAGE_CODE", "en")
LANGUAGES = [
    ("en", _("English")),
    ("ru", _("Russian")),
    # Add other languages here
]
TIME_ZONE = env.str("TIME_ZONE", "UTC")
USE_I18N = True
USE_L10N = True
USE_TZ = True
LOCALE_PATHS = [BASE_DIR / "locale"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# REST
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    )
    if DEBUG is True
    else ("rest_framework_simplejwt.authentication.JWTAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


SPECTACULAR_SETTINGS = {
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": False,
        "persistAuthorization": True,
        "displayOperationId": True,
        "docExpansion": "none",
    },
    "TITLE": "Auto ML Flow API",
    "VERSION": env.str("VERSION", "0.0.1"),
    "DESCRIPTION": "",
    "SERVE_INCLUDE_SCHEMA": False,
}

CELERY_BROKER_URL = f"redis://{REDIS_CELERY_HOST}:{REDIS_CELERY_PORT}"
CELERY_RESULT_BACKEND = f"{CELERY_BROKER_URL}/{REDIS_CELERY_RESULT_DB}"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
# Мягкое время выполнения задачи (в секундах)
CELERY_TASK_SOFT_TIME_LIMIT = 43200
# Количество задач, которые рабочий процесс может предварительно получить
CELERYD_CONCURRENCY = 10
# CELERYD_PREFETCH_MULTIPLIER = 4
# Максимальное количество задач, которые рабочий процесс может выполнить перед заменой
CELERYD_MAX_TASKS_PER_CHILD = 100
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_ENABLED = True
